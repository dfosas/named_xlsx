---
editor:
  markdown:
    wrap: 88
jupyter: py312
---
# `named_xlsx`
[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

## What is it?
This project creates a toolbox for working with Excel files from Python.
It aims to facilitate the release of Excel-based workbooks
with or without macros by developing interfaces with named cells.
It enables reading from and writing to such cells, among other convenient functions.

In particular:

* Implements an interface to work with named cells (workbook scope) in Excel:
  * read and write;
  * type conversion;
  * individual cells, vectors, tables;
  * with different backends in Python (`openpxyl`, `xlwings`).
* Utility class to work with cell addresses and named tables (tables that know they are tables).
* Functions and command line tools to:
  * Read and save to text files named cells and their values.
  * Load and save to Excel files configuration for named cells from text files.
  * Refresh cached values in files.

## Background
Some of my work involves publishing Excel files for the use of others,
typically under the constraints of no macros and 
ensuring that all works as intended and without breaking changes.
Over time, this has been easier to manage from Python.
Given evergrowing needs to do different things around this, 
it made sense working with a number of libraries in Python:
some are faster than others to create file variants, 
some are supported in any platform, 
some require having Excel installed,
sometimes there is a need to work with a feature that only one library supports, etc.
Thus, this package covers all utilities in one place and attempts to have a
consistent, flexible interface that allows swapping underlying libraries whenever possible
(`openpyxl`, `xlwings`).


# User guide
## Command Line Interfaces
Quick tour of options available, best read in order top to bottom
to see how spreadsheets are modified.

### Save
Save configuration by listing named cells with their current values,
optionally filtering names.

```{python}
!named_xlsx-save "examples/sample-1_base.xlsx" --filter_prefix="i."
```

### Load
Load configuration onto target spreadsheet and save.

```{python}
!named_xlsx-load "examples/update.toml" "examples/sample-1_base.xlsx" "examples/sample-2_modified.xlsx"
```

### Refresh
In supported platforms where Excel is available, open and save the file to refresh cached values
(if the spreadsheet automatically computes values).

```{python}
!named_xlsx-refresh --root "examples/"
```

Display new state:
```{python}
!named_xlsx-save "examples/sample-2_modified.xlsx"
```
